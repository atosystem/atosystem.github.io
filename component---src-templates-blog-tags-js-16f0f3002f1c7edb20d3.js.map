{"version":3,"sources":["webpack://gatsby-starter-default/./src/templates/blog-tags.js"],"names":["pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","nodes","map","node","to"],"mappings":"yLA8DA,UAtDiB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACvBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gBAAC,IAAD,KACE,2BACE,0BAAKI,GACL,gBAAC,IAAD,CAAWC,MAAOH,EAAMI,KAAI,qBAAGC,UAgB/B,gBAAC,KAAD,CAAMC,GAAG,SAAT","file":"component---src-templates-blog-tags-js-16f0f3002f1c7edb20d3.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport BlogsList from \"../components/blogs_list\"\n\nconst BlogTags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <div>\n        <h1>{tagHeader}</h1>\n        <BlogsList nodes={edges.map(({ node }) => node)} />\n        {/* <ul>\n        {edges.map(({ node }) => {\n        //   const { slug } = node.fields\n          const { title,slug } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul> */}\n        {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nBlogTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default BlogTags\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            slug\n            stack\n            title\n            tags\n            date(formatString: \"YYYY-MM-DD\")\n            thumb {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          id\n          excerpt(pruneLength: 100)\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}